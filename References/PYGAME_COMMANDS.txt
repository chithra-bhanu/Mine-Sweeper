For sound:



pygame module for loading and playing sounds
pygame.mixer.init
initialize the mixer module
pygame.mixer.pre_init
preset the mixer init arguments
pygame.mixer.quit
uninitialize the mixer
pygame.mixer.get_init
test if the mixer is initialized
pygame.mixer.stop
stop playback of all sound channels
pygame.mixer.pause
temporarily stop playback of all sound channels
pygame.mixer.unpause
resume paused playback of sound channels
pygame.mixer.fadeout
fade out the volume on all sounds before stopping
pygame.mixer.set_num_channels
set the total number of playback channels
pygame.mixer.get_num_channels
get the total number of playback channels
pygame.mixer.set_reserved
reserve channels from being automatically used
pygame.mixer.find_channel
find an unused channel
pygame.mixer.get_busy
test if any sound is being mixed
pygame.mixer.get_sdl_mixer_version
get the mixer's SDL version
pygame.mixer.Sound
Create a new Sound object from a file or buffer object
pygame.mixer.Channel
Create a Channel object for controlling playback




for uploading images:


Pygame Adding Image
To add an image on the window, first, we need to instantiate a blank surface by calling the Surface constructor with a width and height tuple.

surface = pygame.Surface((100,100))  
The above line creates a blank 24-bit RGB image that's 100*100 pixels with the default black color.

For the transparent initialization of Surface, pass the SRCALPHA argument.

surface = pygame.Surface((100,100), pygame.SRCALPHA)  
Consider the following example to display image on the surface